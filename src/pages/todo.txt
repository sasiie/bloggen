const Posts = () => {
  const [isComplete, setIsComplete] = useState(false);
  const [allTodos, setTodos] = useState([]);
  const [completedTodos, setCompletedTodos] = useState([]);
  const [userInput, setUserInput] = useState({
    title: "",
    description: "",
  });

  useEffect(() => {
    const savedTodo = JSON.parse(localStorage.getItem("todolist"));
    const savedCompletedTodo = JSON.parse(
      localStorage.getItem("completedTodos"),
    );

    if (savedTodo) setTodos(savedTodo);
    if (savedCompletedTodo) setCompletedTodos(savedCompletedTodo);
  }, []);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setUserInput((prevUserInput) => ({
      ...prevUserInput,
      [name]: value,
    }));
  };

  const handleAddTodo = (event) => {
    event.preventDefault();
    if (userInput.title.trim() === "" || userInput.description.trim() === "")
      return;

    const newTodoItem = {
      title: userInput.title,
      description: userInput.description,
    };
    const updatedTodoArr = [...allTodos, newTodoItem];
    setTodos(updatedTodoArr);
    localStorage.setItem("todolist", JSON.stringify(updatedTodoArr));
    setUserInput({ title: "", description: "" });
  };

  const handleDeleteTodo = (index) => {
    const reducedTodo = allTodos.filter((_, i) => i !== index);
    setTodos(reducedTodo);
    localStorage.setItem("todolist", JSON.stringify(reducedTodo));
  };

  const handleComplete = (index) => {
    const completedOn = new Date().toLocaleString();
    const filteredItem = { ...allTodos[index], completedOn };
    const updatedCompletedArr = [...completedTodos, filteredItem];
    setCompletedTodos(updatedCompletedArr);
    handleDeleteTodo(index);
    localStorage.setItem("completedTodos", JSON.stringify(updatedCompletedArr));
  };

  const handleDeleteCompletedTodo = (index) => {
    const reducedTodo = completedTodos.filter((_, i) => i !== index);
    setCompletedTodos(reducedTodo);
    localStorage.setItem("completedTodos", JSON.stringify(reducedTodo));
  };

  return (
    <div className="App">
      <div className="Blogg-wrapper">
        <form onSubmit={handleAddTodo} className="Blogg-input">
          <div className="Blogg-input-item">
            <label>Title</label>
            <input
              type="text"
              name="title"
              value={userInput.title}
              onChange={handleChange}
              placeholder="Title"
              className="input-field"
            />
          </div>
          <div className="Blogg-input-item">
            <label>Description</label>
            <input
              type="text"
              name="description"
              value={userInput.description}
              onChange={handleChange}
              placeholder="Tell your story..."
              className="input-field"
            />
          </div>
          <div className="Blogg-input-item">
            <button type="submit" className="primaryBtn">
              Publish it
            </button>
          </div>
        </form>
        <div className="Blogg-list">
          {!isComplete && (
            <div>
              {allTodos.map((item, index) => (
                <div className="Blogg-list-item" key={index}>
                  <div>
                    <h3>{item.title}</h3>
                    <p>{item.description}</p>
                  </div>
                  <div className="Buttons">
                    <button
                      className="Deleteit"
                      onClick={() => handleDeleteTodo(index)}
                    >
                      Ta bort
                    </button>
                    <button
                      className="complete"
                      onClick={() => handleComplete(index)}
                    >
                      FÃ¤rdig
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
          {isComplete && (
            <div>
              {completedTodos.map((item, index) => (
                <div className="Blogg-list-item" key={index}>
                  <div>
                    <h3>{item.title}</h3>
                    <p>{item.description}</p>
                    <p>Completed on: {item.completedOn}</p>
                  </div>
                  <div className="Buttons">
                    <button
                      className="Deleteit"
                      onClick={() => handleDeleteCompletedTodo(index)}
                    >
                      Ta bort
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Posts;


/* Blog Posts */
.blog-posts {
  display: grid;
  grid-gap: 20px;
}

.blog-post {
  border: 1px solid #ccc;
  padding: 10px;
  border-radius: 4px;
  background-color: #fff;
}

.blog-post h3 {
  margin-bottom: 5px;
  font-size: 24px;
}

.blog-post p {
  margin-bottom: 10px;
  font-size: 16px;
}
